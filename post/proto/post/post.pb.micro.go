// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/post/post.proto

package go_micro_srv_post

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PostService service

type PostService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...client.CallOption) (*GetAllUsersResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error)
	GetAllPosts(ctx context.Context, in *GetAllPostsRequest, opts ...client.CallOption) (*GetAllPostsResponse, error)
}

type postService struct {
	c    client.Client
	name string
}

func NewPostService(name string, c client.Client) PostService {
	return &postService{
		c:    c,
		name: name,
	}
}

func (c *postService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostService.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...client.CallOption) (*GetAllUsersResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetAllUsers", in)
	out := new(GetAllUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.CreatePost", in)
	out := new(CreatePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetAllPosts(ctx context.Context, in *GetAllPostsRequest, opts ...client.CallOption) (*GetAllPostsResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetAllPosts", in)
	out := new(GetAllPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostService service

type PostServiceHandler interface {
	Call(context.Context, *Request, *Response) error
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	GetAllUsers(context.Context, *GetAllUsersRequest, *GetAllUsersResponse) error
	CreatePost(context.Context, *CreatePostRequest, *CreatePostResponse) error
	GetAllPosts(context.Context, *GetAllPostsRequest, *GetAllPostsResponse) error
}

func RegisterPostServiceHandler(s server.Server, hdlr PostServiceHandler, opts ...server.HandlerOption) error {
	type postService interface {
		Call(ctx context.Context, in *Request, out *Response) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		GetAllUsers(ctx context.Context, in *GetAllUsersRequest, out *GetAllUsersResponse) error
		CreatePost(ctx context.Context, in *CreatePostRequest, out *CreatePostResponse) error
		GetAllPosts(ctx context.Context, in *GetAllPostsRequest, out *GetAllPostsResponse) error
	}
	type PostService struct {
		postService
	}
	h := &postServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PostService{h}, opts...))
}

type postServiceHandler struct {
	PostServiceHandler
}

func (h *postServiceHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.PostServiceHandler.Call(ctx, in, out)
}

func (h *postServiceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.PostServiceHandler.CreateUser(ctx, in, out)
}

func (h *postServiceHandler) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, out *GetAllUsersResponse) error {
	return h.PostServiceHandler.GetAllUsers(ctx, in, out)
}

func (h *postServiceHandler) CreatePost(ctx context.Context, in *CreatePostRequest, out *CreatePostResponse) error {
	return h.PostServiceHandler.CreatePost(ctx, in, out)
}

func (h *postServiceHandler) GetAllPosts(ctx context.Context, in *GetAllPostsRequest, out *GetAllPostsResponse) error {
	return h.PostServiceHandler.GetAllPosts(ctx, in, out)
}
